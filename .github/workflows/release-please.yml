# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will install Deno then run `deno lint` and `deno test`.
# For more information see: https://github.com/denoland/setup-deno

name: Run Release Please

on:
  workflow_dispatch:
  push:
    branches:
      - "master"

permissions:
  contents: write # to create release commit (google-github-actions/release-please-action)
  pull-requests: write # to create release PR (google-github-actions/release-please-action)

jobs:
  build_and_test:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    env:
      DENO_DIR: my_cache_directory
    steps:
      - name: Cache Deno dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ secrets.CACHE_VERSION }}-${{ hashFiles('deno.lock') }}

      - name: Setup repo
        uses: actions/checkout@v3

      - name: Setup Deno
        uses: denoland/setup-deno@v1.1.2
        #uses: denoland/setup-deno@61fe2df320078202e33d7d5ad347e7dcfa0e8f31  # v1.1.2
        with:
          deno-version: v1.x

      # Uncomment this step to verify the use of 'deno fmt' on each commit.
      # - name: Verify formatting
      #   run: deno fmt --check
      
      #      TODO: Fix linting issues and run later
      #      - name: Run linter
      #        run: deno lint

      - name: Run tests
        run: deno test -A

      - name: Compile MAC
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          deno compile --allow-all main.ts --target aarch64-apple-darwin --output build/backtracking.mac-darwin.arm64
          deno compile --allow-all main.ts --target x86_64-apple-darwin --output build/backtracking.mac-darwin.x64

      - name: Compile Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          deno compile --allow-all main.ts --output build/backtracking.x64.exe

      - name: Compile Linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          deno compile --allow-all main.ts --output build/backtracking_linux

      - uses: actions/upload-artifact@v3
        with:
          path: build/*

  make_release:
    runs-on: ubuntu-latest
    needs: [build_and_test]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: "build"

#      - name: Release
#        uses: softprops/action-gh-release@v1
#        with:
#          files: |
#            build/artifact/*

      - uses: google-github-actions/release-please-action@v3
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          release-type: simple

      - name: tag major and minor versions
        if: ${{ steps.release.outputs.release_created }}
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git remote add gh-token "https://${{ secrets.GH_TOKEN }}@github.com/CryptobotCZ/crypto-trade-backtracker.git"
          git tag -d v${{ steps.release.outputs.major }} || true
          git tag -d v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }} || true
          git push origin :v${{ steps.release.outputs.major }} || true
          git push origin :v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }} || true
          git tag -a v${{ steps.release.outputs.major }} -m "chore(release): Release v${{ steps.release.outputs.major }}"
          git tag -a v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }} -m "chore(release): Release v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}"
          git tag -a v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.${{ steps.release.outputs.patch }} -m "chore(release): Release v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.${{ steps.release.outputs.patch }}"
          git push origin v${{ steps.release.outputs.major }}
          git push origin v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}
          git push origin v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.${{ steps.release.outputs.patch }}

      - name: Upload Release Artifact
        if: ${{ steps.release.outputs.release_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run:
          gh release upload ${{ steps.release.outputs.tag_name }} build/artifact/*

